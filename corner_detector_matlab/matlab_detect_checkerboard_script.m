% Auto-generated by stereoCalibrator app on 09-Aug-2019
%-------------------------------------------------------
function MatlabStereoCalibration_detect_checkerboard_only_script(dirName)

% ourImage = '../../cal_images/calibration_Aug13_reception_large/cap_lft_0.rggb'
% fid = fopen(ourImage,'rb');
% A = fread(fid,'uint16');
% I = reshape(A,col,row);
% I = uint8(I/256);
% RGB = demosaic(I,'bggr');
% %imshow(permute(RGB,[2,1,3]))
% RGB = permute(RGB,[2,1,3]);
% fclose(fid);
dirName
%status, out = system('find ' dirName ' -name ' "CaptureRecord*" ' -type d | sort')
%system(['find ' dirName  ' -name ' "CaptureRecord*" ' -type d | sort'],'-echo')

%system('pwd', '-echo')
%filename_image = []
list = dir(dirName);
list.name;
size(list);
count = 1
for i = 1:size(list)
    if list(i).isdir
     list(i).name;
     k = findstr('CaptureRecord',list(i).name);
     if k == 1
         dirname_image{count} = strcat(dirName,'/', list(i).name);
         count = count+1;
     end
    end
end
numImages = size(dirname_image,2);
%size(filename_image)
%k = findstring("CaptureRecord",list.name


% clf
% clear all
% close all
useMultiview = false;
useRWC = false;
usePackedFormat = true;

  
       
        row = 2200;
        col = 3208;
     
         index_set = [1:numImages];
   
    
     
    imageFileNames1 = {};
    imageFileNames2 = {};
    
     
    for i = 1:numImages
           
           
           %left_name = sprintf('%s%s%d%s',dirName,'Image_sn194000199_f',i-1,'.bin');
           
           
           %A1_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn194000203_f00000000','.bin');
           A1_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn194000203_f0','.bin');
           
           A1_name;
           fid = fopen(A1_name,'rb');
        
            if (usePackedFormat == true)
                A = fread(fid,'*ubit12');
                I = reshape(A,col,row);
                I = uint8(I/16);
            else
                A = fread(fid,'uint16');
                I = reshape(A,col,row);
                I = uint8(I/256);
            end
 
           
            RGB = demosaic(I,'rggb');
            
            RGB = permute(RGB,[2,1,3]);
           
            fclose(fid);
            A1_Images{i} = RGB;
           
           
           %A2_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn193900402_f00000000','.bin');
           A2_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn193900402_f0','.bin');
           
           fid = fopen(A2_name,'rb');
        
            if (usePackedFormat == true)
                A = fread(fid,'*ubit12');
                I = reshape(A,col,row);
                I = uint8(I/16);
            else
                A = fread(fid,'uint16');
                I = reshape(A,col,row);
                I = uint8(I/256);
            end
 
           
            RGB = demosaic(I,'rggb');
            
            RGB = permute(RGB,[2,1,3]);
           
            fclose(fid);
            A2_Images{i} = RGB;
           
           
           %A3_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn194000199_f00000000','.bin');
           A3_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn194000199_f0','.bin');
           
           fid = fopen(A3_name,'rb');
        
            if (usePackedFormat == true)
                A = fread(fid,'*ubit12');
                I = reshape(A,col,row);
                I = uint8(I/16);
            else
                A = fread(fid,'uint16');
                I = reshape(A,col,row);
                I = uint8(I/256);
            end
 
           
            RGB = demosaic(I,'rggb');
            
            RGB = permute(RGB,[2,1,3]);
           
            fclose(fid);
            A3_Images{i} = RGB;
           
           
           %A4_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn193900404_f00000000','.bin');
           A4_name  = sprintf('%s/%s%s',dirname_image{i},'Image_sn193900404_f0','.bin');
    
           fid = fopen(A4_name,'rb');
        
            if (usePackedFormat == true)
                A = fread(fid,'*ubit12');
                I = reshape(A,col,row);
                I = uint8(I/16);
            else
                A = fread(fid,'uint16');
                I = reshape(A,col,row);
                I = uint8(I/256);
            end
 
           
            RGB = demosaic(I,'rggb');
            
            RGB = permute(RGB,[2,1,3]);
           
            fclose(fid);
            A4_Images{i} = RGB;
 
    end
    
    A1_ImagesArray = cell2mat(A1_Images);
    size1 = size(A1_ImagesArray)
    A1_ImagesArray = reshape(A1_ImagesArray,[size1(1),col,numImages,size1(3)]);
    A1_ImagesArray = permute(A1_ImagesArray,[1,2,4,3]);
    
    A2_ImagesArray = cell2mat(A2_Images);
    size1 = size(A2_ImagesArray)
    A2_ImagesArray = reshape(A2_ImagesArray,[size1(1),col,numImages,size1(3)]);
    A2_ImagesArray = permute(A2_ImagesArray,[1,2,4,3]);
    
    A3_ImagesArray = cell2mat(A3_Images);
    size1 = size(A3_ImagesArray)
    A3_ImagesArray = reshape(A3_ImagesArray,[size1(1),col,numImages,size1(3)]);
    A3_ImagesArray = permute(A3_ImagesArray,[1,2,4,3]);
    
    A4_ImagesArray = cell2mat(A4_Images);
    size1 = size(A4_ImagesArray)
    A4_ImagesArray = reshape(A4_ImagesArray,[size1(1),col,numImages,size1(3)]);
    A4_ImagesArray = permute(A4_ImagesArray,[1,2,4,3]);
    
    
    [A1_imagePoints, boardSize, A1_imagesUsed] = detectCheckerboardPoints(A1_ImagesArray);
    size_arr = size(A1_imagePoints)
    %A1_imagePoints_ext = zeros(size_arr[], size_arr[2], size_arr[3]+1);
    number_of_corner_points = (boardSize(1) - 1) * (boardSize(2)-1);
    A1_imagePoints_tmp = reshape(A1_imagePoints, [boardSize(1)-1, boardSize(2)-1, size_arr(2), size_arr(3)]);
    A1_imagePoints_flip = flip(A1_imagePoints_tmp,1);
    A1_imagePoints = reshape(A1_imagePoints_flip,[number_of_corner_points, size_arr(2), size_arr(3)]);
    %A1_imagePoints_ext(:,:,1:2) = A1_imagePoints;
    %A1_imagePoints = A1_imagePoints_ext;
    
   
    
    [A2_imagePoints, boardSize, A2_imagesUsed] = detectCheckerboardPoints(A2_ImagesArray);
    size_arr = size(A2_imagePoints);
    A2_imagePoints_tmp = reshape(A2_imagePoints, [boardSize(1)-1, boardSize(2)-1, size_arr(2), size_arr(3)]);
    A2_imagePoints_flip = flip(A2_imagePoints_tmp,1);
    A2_imagePoints = reshape(A2_imagePoints_flip,[number_of_corner_points, size_arr(2), size_arr(3)]);
    
    
    
    [A3_imagePoints, boardSize, A3_imagesUsed] = detectCheckerboardPoints(A3_ImagesArray);
    size_arr = size(A3_imagePoints);
    A3_imagePoints_tmp = reshape(A3_imagePoints, [boardSize(1)-1, boardSize(2)-1, size_arr(2), size_arr(3)]);
    A3_imagePoints_flip = flip(A3_imagePoints_tmp,1);
    A3_imagePoints = reshape(A3_imagePoints_flip,[number_of_corner_points, size_arr(2), size_arr(3)]);
    
    [A4_imagePoints, boardSize, A4_imagesUsed] = detectCheckerboardPoints(A4_ImagesArray);
    size_arr = size(A4_imagePoints);
    A4_imagePoints_tmp = reshape(A4_imagePoints, [boardSize(1)-1, boardSize(2)-1, size_arr(2), size_arr(3)]);
    A4_imagePoints_flip = flip(A4_imagePoints_tmp,1);
    A4_imagePoints = reshape(A4_imagePoints_flip,[number_of_corner_points, size_arr(2), size_arr(3)]);
    
    
    %save('input_for_extrinsincs_function','worldPoints', 'imagePoints','stereoParams');
    file_name = sprintf('%s%s%s',dirName,'/','input_for_extrinsincs_function.mat');
    save(file_name,'A1_imagePoints', 'A1_imagesUsed','A2_imagePoints', 'A2_imagesUsed','A3_imagePoints',...
    'A3_imagesUsed','A4_imagePoints', 'A4_imagesUsed');
    



